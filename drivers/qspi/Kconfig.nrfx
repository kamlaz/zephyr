# Copyright (c) 2017 - 2018, Nordic Semiconductor ASA
#
# SPDX-License-Identifier: Apache-2.0
#

menuconfig QSPI_NRFX
	bool "nRF QSPI nrfx drivers"
	default y
	depends on SOC_FAMILY_NRF
	help
	  Enable support for nrfx QSPI drivers for nRF MCU series.
	  Peripherals with the same instance ID cannot be used together,
	  e.g. QSPI_0 and I2C_0. You may need to disable I2C_0 or I2C_1.

if QSPI_NRFX

config SOC_NRF52832_ALLOW_QSPIM_DESPITE_PAN_58
	depends on SOC_NRF52832
	bool "Allow enabling the QSPIM driver despite PAN 58"
	help
	  Allow enabling the nRF QSPI Master with EasyDMA, despite
	  Product Anomaly Notice 58 (QSPIM: An additional byte is
	  clocked out when RXD.MAXCNT == 1 and TXD.MAXCNT <= 1).
	  Without this override, the QSPI Master is only available
	  without EasyDMA. Note that the 'QSPIM' and 'QSPIS' drivers
	  use EasyDMA, while the 'QSPI' driver does not. Use this
	  option ONLY if you are certain that transactions with
	  RXD.MAXCNT == 1 and TXD.MAXCNT <= 1 will NOT be executed.

# In most Nordic SoCs, QSPI and TWI peripherals with the same instance number
# share certain resources and therefore cannot be used at the same time
# (in nRF91 Series this limitation concerns UART peripherals as well).
# In nRF52810 though, there are only single instances of these peripherals
# and they are arranged in a different way, so this limitation does not apply.
if QSPI_0 && (SOC_NRF52810 || \
             (!I2C_0 && !(SOC_SERIES_NRF91X && UART_0_NRF_UARTE)))

choice
	prompt "QSPI Port 0 Driver type"

config QSPI_NRF_QSPI
	bool "nRF QSPI"
	depends on HAS_HW_NRF_QSPI
	select NRFX_QSPI
	help
	  Enable nRF QSPI Master without EasyDMA on port 0.

config QSPI_0_NRF_QSPI
	bool "nRF QSPI 0"
	depends on HAS_HW_NRF_QSPI0
	select NRFX_QSPI
	help
	  Enable nRF QSPI Master without EasyDMA on port 0.

config QSPI_0_NRF_QSPIM
	bool "nRF QSPIM 0"
	# This driver is not available for nRF52832 because of Product Anomaly 58
	# (QSPIM: An additional byte is clocked out when RXD.MAXCNT == 1 and TXD.MAXCNT <= 1)
	# Allow the 'EasyDMA' driver only if this automatic safety-disable is overridden
	depends on HAS_HW_NRF_QSPIM0 && (!SOC_NRF52832 || SOC_NRF52832_ALLOW_QSPIM_DEQSPITE_PAN_58)
	select NRFX_QSPIM
	help
	  Enable nRF QSPI Master with EasyDMA on port 0.

config QSPI_0_NRF_QSPIS
	bool "nRF QSPIS 0"
	depends on HAS_HW_NRF_QSPIS0
	depends on QSPI_SLAVE
	select NRFX_QSPIS
	help
	  Enable nRF QSPI Slave with EasyDMA on port 0.
	  Due to hardware limitations the implementation supports only simple
	  buffers (consisting of one part) located in RAM.

endchoice

if QSPI_0_NRF_QSPI || QSPI_0_NRF_QSPIM || QSPI_0_NRF_QSPIS

config QSPI_0_NRF_ORC
	hex "QSPI Port 0 over-read character"
	range 0x00 0xff
	default 0xff
	help
	  Over-read character. Character clocked out after an over-read
	  of the transmit buffer.

endif # QSPI_0_NRF_QSPI || QSPI_0_NRF_QSPIM || QSPI_0_NRF_QSPIS

endif # QSPI_0 && (SOC_NRF52810 || ...

# In Nordic SoCs, QSPI and TWI peripherals with the same instance number
# share certain resources and therefore cannot be used at the same time
# (in nRF91 Series this limitation concerns UART peripherals as well).
if QSPI_1 && !I2C_1 && !(SOC_SERIES_NRF91X && UART_1_NRF_UARTE)

choice
	prompt "QSPI Port 1 Driver type"

config QSPI_1_NRF_QSPI
	bool "nRF QSPI 1"
	depends on HAS_HW_NRF_QSPI1
	select NRFX_QSPI
	help
	  Enable nRF QSPI Master without EasyDMA on port 1.

config QSPI_1_NRF_QSPIM
	bool "nRF QSPIM 1"
	# This driver is not available for nRF52832 because of Product Anomaly 58
	# (QSPIM: An additional byte is clocked out when RXD.MAXCNT == 1 and TXD.MAXCNT <= 1)
	# Allow the 'EasyDMA' driver only if this automatic safety-disable is overridden
	depends on HAS_HW_NRF_QSPIM1 && (!SOC_NRF52832 || SOC_NRF52832_ALLOW_QSPIM_DEQSPITE_PAN_58)
	select NRFX_QSPIM
	help
	  Enable nRF QSPI Master with EasyDMA on port 1.

config QSPI_1_NRF_QSPIS
	bool "nRF QSPIS 1"
	depends on HAS_HW_NRF_QSPIS1
	depends on QSPI_SLAVE
	select NRFX_QSPIS
	help
	  Enable nRF QSPI Slave with EasyDMA on port 1.
	  Due to hardware limitations the implementation supports only simple
	  buffers (consisting of one part) located in RAM.

endchoice

if QSPI_1_NRF_QSPI || QSPI_1_NRF_QSPIM || QSPI_1_NRF_QSPIS

config QSPI_1_NRF_ORC
	hex "QSPI Port 1 over-read character"
	range 0x00 0xff
	default 0xff
	help
	  Over-read character. Character clocked out after an over-read
	  of the transmit buffer.

endif # QSPI_1_NRF_QSPI || QSPI_1_NRF_QSPIM || QSPI_1_NRF_QSPIS

endif # QSPI_1 && !I2C_1 && !(SOC_SERIES_NRF91X && UART_1_NRF_UARTE)

# In Nordic SoCs, QSPI and TWI peripherals with the same instance number
# share certain resources and therefore cannot be used at the same time
# (in nRF91 Series this limitation concerns UART peripherals as well).
if QSPI_2 && !I2C_2 && !(SOC_SERIES_NRF91X && UART_2_NRF_UARTE)

choice
	prompt "QSPI Port 2 Driver type"

config QSPI_2_NRF_QSPI
	bool "nRF QSPI 2"
	depends on HAS_HW_NRF_QSPI2
	select NRFX_QSPI
	help
	  Enable nRF QSPI Master without EasyDMA on port 2.

config QSPI_2_NRF_QSPIM
	bool "nRF QSPIM 2"
	# This driver is not available for nRF52832 because of Product Anomaly 58
	# (QSPIM: An additional byte is clocked out when RXD.MAXCNT == 1 and TXD.MAXCNT <= 1)
	# Allow the 'EasyDMA' driver only if this automatic safety-disable is overridden
	depends on HAS_HW_NRF_QSPIM2 && (!SOC_NRF52832 || SOC_NRF52832_ALLOW_QSPIM_DEQSPITE_PAN_58)
	select NRFX_QSPIM
	help
	  Enable nRF QSPI Master with EasyDMA on port 2.

config QSPI_2_NRF_QSPIS
	bool "nRF QSPIS 2"
	depends on HAS_HW_NRF_QSPIS2
	depends on QSPI_SLAVE
	select NRFX_QSPIS
	help
	  Enable nRF QSPI Slave with EasyDMA on port 2.
	  Due to hardware limitations the implementation supports only simple
	  buffers (consisting of one part) located in RAM.

endchoice

if QSPI_2_NRF_QSPI || QSPI_2_NRF_QSPIM || QSPI_2_NRF_QSPIS

config QSPI_2_NRF_ORC
	hex "QSPI Port 2 over-read character"
	range 0x00 0xff
	default 0xff
	help
	  Over-read character. Character clocked out after an over-read
	  of the transmit buffer.

endif # QSPI_2_NRF_QSPI || QSPI_2_NRF_QSPIM || QSPI_2_NRF_QSPIS

endif # QSPI_2 && !I2C_2 && !(SOC_SERIES_NRF91X && UART_2_NRF_UARTE)

# In Nordic SoCs, QSPI and TWI peripherals with the same instance number
# share certain resources and therefore cannot be used at the same time
# (in nRF91 Series this limitation concerns UART peripherals as well).
if QSPI_3 && !I2C_3 && !(SOC_SERIES_NRF91X && UART_3_NRF_UARTE)

choice
	prompt "QSPI Port 3 Driver type"

config QSPI_3_NRF_QSPIM
	bool "nRF QSPIM 3"
	depends on HAS_HW_NRF_QSPIM3
	select NRFX_QSPIM
	help
	  Enable nRF QSPI Master with EasyDMA on port 3.

config QSPI_3_NRF_QSPIS
	bool "nRF QSPIS 3"
	depends on HAS_HW_NRF_QSPIS3
	depends on QSPI_SLAVE
	select NRFX_QSPIS
	help
	  Enable nRF QSPI Slave with EasyDMA on port 3.
	  Due to hardware limitations the implementation supports only simple
	  buffers (consisting of one part) located in RAM.

endchoice

if QSPI_3_NRF_QSPIM || QSPI_3_NRF_QSPIS

config QSPI_3_NRF_ORC
	hex "QSPI Port 3 over-read character"
	range 0x00 0xff
	default 0xff
	help
	  Over-read character. Character clocked out after an over-read
	  of the transmit buffer.

endif # QSPI_3_NRF_QSPIM || QSPI_3_NRF_QSPIS

config QSPI_3_NRF_RX_DELAY
	int "QSPIM3 MISO sampling delay"
	depends on QSPI_3_NRF_QSPIM && SOC_NRF52840
	range 0 7
	default 2
	help
	  Number of 64 MHz clock cycles (15.625 ns) delay from the sampling
	  edge of SCK (leading or trailing, depending on the CPHA setting used)
	  until the input serial data on MISO is actually sampled.

endif # QSPI_3 && !I2C_3 && !(SOC_SERIES_NRF91X && UART_3_NRF_UARTE)

if NRFX_QSPIM

config QSPI_NRFX_RAM_BUFFER_SIZE
	int "Size of RAM buffers for QSPIM peripherals"
	default 0
	help
	  QSPIM peripherals cannot transmit data directly from flash. Therefore,
	  a buffer in RAM needs to be provided for each instance of QSPI driver
	  using QSPIM peripheral, so that the driver can copy there a chunk of
	  data from flash and transmit it.
	  The size is specified in bytes. A size of 0 means that this feature
	  should be disabled, and the application must then take care of not
	  supplying buffers located in flash to the driver, otherwise such
	  transfers will fail.

choice
	prompt "nRF QSPIM MISO pin pull configuration"
	default QSPI_NRFX_QSPIM_MISO_PULL_DOWN

config QSPI_NRFX_QSPIM_MISO_NO_PULL
	bool "no pull"
	help
	  Disable MISO pin pull.

config QSPI_NRFX_QSPIM_MISO_PULL_DOWN
	bool "pull down"
	help
	  Enable MISO pin pull down.

config QSPI_NRFX_QSPIM_MISO_PULL_UP
	bool "pull up"
	help
	  Enable MISO pin pull up.

endchoice

endif # NRFX_QSPIM

if NRFX_QSPI

choice
	prompt "nRF QSPI MISO pin pull configuration"
	default QSPI_NRFX_QSPI_MISO_PULL_DOWN

config QSPI_NRFX_QSPI_MISO_NO_PULL
	bool "no pull"
	help
	  Disable MISO pin pull.

config QSPI_NRFX_QSPI_MISO_PULL_DOWN
	bool "pull down"
	help
	  Enable MISO pin pull down.

config QSPI_NRFX_QSPI_MISO_PULL_UP
	bool "pull up"
	help
	  Enable MISO pin pull up.

endchoice

endif # NRFX_QSPI

endif # QSPI_NRFX
